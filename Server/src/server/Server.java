package server;

import com.corundumstudio.socketio.AckRequest;
import com.corundumstudio.socketio.Configuration;
import com.corundumstudio.socketio.SocketIOClient;
import com.corundumstudio.socketio.SocketIOServer;
import com.corundumstudio.socketio.listener.ConnectListener;
import com.corundumstudio.socketio.listener.DataListener;
import com.corundumstudio.socketio.listener.DisconnectListener;
import data.ClientDownload;
import data.ServerSideFileSending;
import data.CurrentObjServer;
import data.InitFile;
import data.RequestedFile;
import data.ServerSideFileUtils;
import java.awt.Component;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.nio.file.Path;

/**
 *
 * @author Komputer
 */

public class Server extends javax.swing.JFrame {

    /**
     * Creates new form Server
     */
    public Server() {
        initComponents();
        table.getColumnModel().getColumn(3).setCellRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable jtable, Object o, boolean bln, boolean bln1, int i, int i1) {
                Component com = super.getTableCellRendererComponent(jtable, o, bln, bln1, i, i1);
                Object data = jtable.getValueAt(i, 0);
                if (data instanceof ClientDownload) {
                    Component c = ((ClientDownload) data).getStatus();
                    c.setBackground(com.getBackground());
                    return c;
                } else {
                    return com;
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new javax.swing.JPopupMenu();
        disconnect = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        cmdStart = new javax.swing.JButton();

        disconnect.setText("Disconnect This Client");
        disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectActionPerformed(evt);
            }
        });
        menu.add(disconnect);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");
        setBackground(new java.awt.Color(153, 153, 255));

        table.setBackground(new java.awt.Color(153, 204, 255));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Client No.", "Client name", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setGridColor(new java.awt.Color(153, 0, 204));
        table.setRowHeight(35);
        table.setSelectionBackground(new java.awt.Color(204, 204, 255));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(0);
            table.getColumnModel().getColumn(0).setPreferredWidth(0);
            table.getColumnModel().getColumn(0).setMaxWidth(0);
            table.getColumnModel().getColumn(1).setPreferredWidth(30);
            table.getColumnModel().getColumn(3).setPreferredWidth(300);
        }

        cmdStart.setBackground(new java.awt.Color(193, 229, 193));
        cmdStart.setText("Start Server");
        cmdStart.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cmdStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdStartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 611, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(cmdStart, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmdStart, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private final int DEFAULT_PORT = 9999;
    private final List<CurrentObjServer> listFiles = new ArrayList<>();
    private SocketIOServer server;
    private void cmdStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdStartActionPerformed
        if (server == null) {
            Configuration configuration = new Configuration();
            configuration.setPort(DEFAULT_PORT);
            server = new SocketIOServer(configuration);
            //  Addd event to server when client connected
            server.addConnectListener(new ConnectListener() {
                @Override
                public void onConnect(SocketIOClient sioc) {
                    //  This method run when new client connected
                    
                    ClientDownload client = new ClientDownload(sioc, "", table);
                    //  Add this data to table
                    addTableRow(client);
                }
            });
            server.addDisconnectListener(new DisconnectListener() {
                @Override
                public void onDisconnect(SocketIOClient sioc) {
                    removeClient(sioc);
                }
            });
            server.addEventListener("set_user", String.class, new DataListener<String>() {
                @Override
                public void onData(SocketIOClient sioc, String t, AckRequest ar) throws Exception {
                    setUserName(sioc, t);
                }
            });
            server.addEventListener("send_file", InitFile.class, new DataListener<InitFile>() {
                @Override
                public void onData(SocketIOClient sioc, InitFile t, AckRequest ar) throws Exception {
                    int fileID = initFileTransfer(sioc, t);
                    if (fileID > 0) {
                        //  call back function to client
                        ar.sendAckData(true, fileID);
                    }
                }
            });
            server.addEventListener("sending", ServerSideFileSending.class, new DataListener<ServerSideFileSending>() {
                @Override
                public void onData(SocketIOClient sioc, ServerSideFileSending t, AckRequest ar) throws Exception {
                    if (!t.isFinish()) {
                        writeFile(sioc, t);
                        ar.sendAckData(true);
                    } else {
                        //  file finish
                        ar.sendAckData(false);
                        CurrentObjServer data = closeFile(sioc, t);
                        if (data != null) {
                            server.getBroadcastOperations().sendEvent("new_file", data);
                        }
                    }
                }
            });
            //get file lenght
            server.addEventListener("r_f_l", Integer.class, new DataListener<Integer>() {
                @Override
                public void onData(SocketIOClient sioc, Integer t, AckRequest ar) throws Exception {
                    try {
                        long length = getFileLength(sioc, t);
                        if (length > 0) {
                            ar.sendAckData(length + "");
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });
            server.addEventListener("request", String.class, new DataListener<String>() {
                @Override
                public void onData(SocketIOClient sioc, String t, AckRequest ar) throws Exception {
                    if (t.equals("list_file")) {
                        ar.sendAckData(listFiles.toArray());
                    }
                }
            });
            server.addEventListener("request_file", RequestedFile.class, new DataListener<RequestedFile>() {
                @Override
                public void onData(SocketIOClient sioc, RequestedFile t, AckRequest ar) throws Exception {
                    try {
                        byte b[] = getFile(t);
                        if (b != null) {
                            ar.sendAckData(b);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
            server.start();
        }
    }//GEN-LAST:event_cmdStartActionPerformed

    private void disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectActionPerformed
        if (table.getSelectedRow() >= 0) {
            int row = table.getSelectedRow();
            ClientDownload data = (ClientDownload) table.getValueAt(row, 0);
            data.getClient().sendEvent("exit_app", "");
        }
    }//GEN-LAST:event_disconnectActionPerformed

    private void tableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseReleased
        if (table.getSelectedRow() >= 0 && SwingUtilities.isRightMouseButton(evt)) {
            menu.show(table, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableMouseReleased

    private void addTableRow(ClientDownload data) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.addRow(data.toRowTable(table.getRowCount() + 1));
    }
    /**
     *
     * Removes client after disconnection
     */
    private void removeClient(SocketIOClient client) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for (int i = 0; i < table.getRowCount(); i++) {
            ClientDownload data = (ClientDownload) table.getValueAt(i, 0);
            if (data.getClient() == client) {
                model.removeRow(i);
                break;
            }
        }
    }
    
    /**
     *
     * Adds username into table 
     */

    private void setUserName(SocketIOClient client, String name) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for (int i = 0; i < table.getRowCount(); i++) {
            ClientDownload data = (ClientDownload) table.getValueAt(i, 0);
            if (data.getClient() == client) {
                data.setName(name);
                model.setValueAt(name, i, 2);
                break;
            }
        }
    }
    
    /**
     *
     * Init file, function initsm saving incoming file into predefined folder 
     */
    private int initFileTransfer(SocketIOClient client, InitFile dataInit) {
        int id = 0;
        for (int i = 0; i < table.getRowCount(); i++) {
            ClientDownload data = (ClientDownload) table.getValueAt(i, 0);
            if (data.getClient() == client) {
                try {
                    String directoryName = Path.of("").toAbsolutePath().toString() + "\\files";
                    
                    File directory = new File(directoryName);
                    if (! directory.exists()){
                        directory.mkdir();
                    }
                    
                    id = generateFileID();
                    File fileToBeDownloaded = new File(directory, dataInit.getFileName());
                    
                    ServerSideFileUtils writer = new ServerSideFileUtils(fileToBeDownloaded, dataInit.getFileSize());
                    data.addWrite(writer, id);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            }
        }
        return id;
    }
    
    /**
    *
    * writes file on server side
    */
    private boolean writeFile(SocketIOClient client, ServerSideFileSending file) {
        boolean error = false;
        for (int i = 0; i < table.getRowCount(); i++) {
            ClientDownload data = (ClientDownload) table.getValueAt(i, 0);
            if (data.getClient() == client) {
                try {
                    data.writeFile(file.getData(), file.getFileID());
                } catch (Exception e) {
                    error = true;
                    e.printStackTrace();
                }
                break;
            }
        }
        //  return true if not error
        return !error;
    }
    
    
    /**
     *
     * Closes file after usage
     */

    private CurrentObjServer closeFile(SocketIOClient client, ServerSideFileSending file) {
        CurrentObjServer fileServer = null;
        for (int i = 0; i < table.getRowCount(); i++) {
            ClientDownload data = (ClientDownload) table.getValueAt(i, 0);
            if (data.getClient() == client) {
                try {
                    fileServer = data.getDataFileServer(file.getFileID());
                    listFiles.add(fileServer);
                    data.closeWriter(file.getFileID());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            }
        }
        return fileServer;
    }
    
/**
 *
 * Returns file lenght 
 */

    private long getFileLength(SocketIOClient client, int fileID) throws IOException {
        for (int i = 0; i < table.getRowCount(); i++) {
            ClientDownload data = (ClientDownload) table.getValueAt(i, 0);
            if (data.getClient() == client) {
                return data.getFileLength(fileID);
            }
        }
        return 0;
    }
    private int fileID;
    
    
    /**
     *
     * Generates fileID for files 
     */

    private synchronized int generateFileID() {
        fileID++;
        return fileID;
    }
    
    /**
     *
     * Gets file and splits it in chunks 
     */

    private byte[] getFile(RequestedFile data) throws IOException {
        for (CurrentObjServer d : listFiles) {
            if (d.getFileID() == data.getFileID()) {
                RandomAccessFile accFile = new RandomAccessFile(d.getOutPutPath(), "r");
                accFile.seek(data.getLength());
                long filePointer = data.getLength();
                long fileSize = d.getFileSizeLength();
                if (filePointer != fileSize) {
                    int max = 2000;
                    //  2000 is max send file per package
                    //  split if larger 
                    long length = filePointer + max >= fileSize ? fileSize - filePointer : max;
                    byte[] b = new byte[(int) length];
                    accFile.read(b);
                    return b;
                } else {
                    return null;
                }
            }
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //* Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdStart;
    private javax.swing.JMenuItem disconnect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu menu;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
